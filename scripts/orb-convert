#!/usr/bin/env python
# *-* coding: utf-8 *-*
# Author: Thomas Martin <thomas.martin.1@ulaval.ca> 
# File: orb-convert

## Copyright (c) 2010-2016 Thomas Martin <thomas.martin.1@ulaval.ca>
## 
## This file is part of ORB
##
## ORB is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## ORB is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
## License for more details.
##
## You should have received a copy of the GNU General Public License
## along with ORB.  If not, see <http://www.gnu.org/licenses/>.

import sys, os

from argparse import ArgumentParser
import argparse

from orb.core import Tools, HDFCube, ProgressBar
import orb

###########################################
### MAIN ##################################
###########################################
    
def main(args):

    DIV_NB = 2
    cube = HDFCube(args.input_cube_path)

    if not args.split:
        export_path = os.path.splitext(args.input_cube_path)[0] + '.fits'
        cube.export(export_path, force_fits=True, overwrite=True,
                    header=cube.get_cube_header())
    else:
        for iquad in range(DIV_NB**2):
            print 'Exporting quadrant {}'.format(iquad)
            export_path = (os.path.splitext(
                args.input_cube_path)[0]
                           + '.quad{}.fits'.format(iquad))
        
            xmin, xmax, ymin, ymax = cube.get_quadrant_dims(iquad, div_nb=DIV_NB)
            cube.export(
                export_path, force_fits=True, overwrite=True,
                header=cube.get_cube_header(),
                x_range=(xmin,xmax),
                y_range=(ymin,ymax))
                
                
                
            

if __name__ == "__main__":

    parser = ArgumentParser(version=('ORB-version {}'.format(
        orb.core.__version__)),
                            description=
                            "Convert an HDF5 cube to a FITS cube")
    
    parser.add_argument('input_cube_path', help='Path to an HDF5 cube.')
    parser.add_argument('--split', dest='split', action='store_true',
                        default=False,
                        help='Split output cube into 4 quadrants')

 
    args = parser.parse_args()

    main(args)
        

